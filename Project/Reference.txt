TableLayout
https://recipes4dev.tistory.com/138

DataBase
https://developer.android.com/training/data-storage/sqlite?hl=ko
https://developer.android.com/training/data-storage/room?hl=ko#kotlin
https://todaycode.tistory.com/39
https://lab.cliel.com/entry/kotlin-SQLite-%EC%97%B0%EA%B2%B0%EB%B0%8F-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0

Room
https://developer.android.com/training/data-storage/room?hl=ko
https://hydroponicglass.tistory.com/204

DAO
https://developer.android.com/training/data-storage/room/accessing-data?hl=ko
https://blog.mindorks.com/data-access-objects-dao-in-room
https://greedy0110.tistory.com/51#recentEntries
https://blog.yena.io/studynote/2018/09/08/Android-Kotlin-Room.html

Kotlin 사용 설정
https://3edc.tistory.com/65
https://developer88.tistory.com/171
https://kotlinlang.org/docs/kapt.html

Kotlin: '?' 을 붙이는 것의 의미
https://tourspace.tistory.com/114

Kotlin: var, val 의 차이
https://velog.io/@jojo_devstory/Kotlin-val-var%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90



    @Entity(tableName = "expense")
    class Expense(
            @PrimaryKey(autoGenerate = true) var id: Int=0,
            @ColumnInfo (name = "time") var time: Date,
            @ColumnInfo (name = "title") var title: String?,
            @ColumnInfo (name = "sort") var sort: String,
            @ColumnInfo (name = "price") var price: Int
    )

    @Dao
    interface ExpenseDao {
        @Insert(onConflict = OnConflictStrategy.REPLACE)
        fun insertExp(expense: Expense)

        @Delete
        fun deleteExp(expense: Expense)

        @Update
        fun updateExp(expense: Expense)

        @Query("SELECT * FROM expense")
        fun getExpAll(): List<Expense>

        @Query("SELECT * FROM expense WHERE time>=:minTime and time<=:maxTime")
        fun getExpTime(minTime: Date, maxTime: Date): List<Expense>
    }

    @Database(entities = arrayOf(Expense::class), version = 1)
    abstract class AppDatabase: RoomDatabase() {
        abstract fun expDao(): ExpenseDao
    }
    val ExpenseDB = Room.databaseBuilder(
            this,
            AppDatabase::class.java, "database-name").allowMainThreadQueries().build()

    object FeedReaderContract {
        // Table contents are grouped together in an anonymous object.
        object FeedEntry : BaseColumns {
            const val TABLE_NAME = "entry"
            const val COLUMN_NAME_TITLE = "title"
            const val COLUMN_NAME_SUBTITLE = "subtitle"
        }
    }
